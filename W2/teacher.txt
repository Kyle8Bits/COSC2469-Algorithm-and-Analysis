Part 1

T(N) = 999*N - SQRT(N)

Select C = 999 and N0 = 1, we have

T(N) = 999*N - SQRT(N) < 999*N = C*N < C*(N^2), for N >= N0

=> (N^2) is the upper bound on T(N)
=> T(N) = O(N^2)

====
Notes: you can use the same process to prove that

T(N) = O(N^3)
T(N) = O(N*lg(N))
T(N) = O(N)
etc.

but not

T(N) = O(lg(N))
T(N) = O(SQRT(N))
etc.

===
If you want to denote a tight bound, use Big-Theta instead of Big-

---------------------------------------------------------------------------------------------------------------

Part 2

// Approach 1: brute force
// Idea: for each element, display it only if there is NO
// preceding element equals to it

for i = 0 to N-1
  found = false
  for j = 0 to i-1
    if A[j] == A[i]
	    found = true
      break
  if !found
    print A[i]

Complexity analysis:
  The inner loop executes at most i times for each outer iteration
  i ranges from 0 to N-1
  => The total execution times of the inner loop: T(N) = 1 + 2 + ... + N
  T(N) = N*(N+1)/2
  Remove the less significant components and multiplicative constants, we have
  T(N) = O(N^2)


// Approach 2: sort then search
// Idea: after sorting, for each element, we only need to do ONE comparison
// to the immediately preceding element
// Assumption: complexity of sorting O(N*lg(N))

sort(A)
print A[0]
for i = 1 to N-1
  if A[i] != A[i-1]
    print A[i]

Complexity analysis:
  The maximum number of statements executed in the for loop: 2 (comparison and printing)
  There are N iterations
  => Complexity of the for loop O(N)
  Final complexity: O(N*lg(N)) + O(N) = O(N*lg(N))

---------------------------------------------------------------------------------------------------------------

Part 3

// Approach: there are two types of events: arrival and departure
// When we scan the events from earliest to latest,
// if we encounter an arrival event => increase the gates required
// if we encounter a departure event => decrease the gates required
// during this process: need to keep track of the maximum value of gates required

arrival[0..N-1]
departure[0..N-1]

// the Event ADT consists of two attribute: time and type
// time is a point in time
// type can be either "Arrival" or "Departure"

events = Event[0..2*N-1]

for i = 0 to N-1
  events[i].time = arrival[i]
  events[i].type = "Arrival"

  events[N+i].time = departure[i]
  events[N+i].type = "Departure"

// => complexity: O(N)

// sort the events array based on the "time" attribute
sort(events)

// => complexity: O(2N*lg(2N)) = O(N*lg(N))

largest = gates = 0
for i = 0 to (2*N - 1)
  if events[i].type == "Arrival"
    gates++
  else
    gates--
  largest = max(largest, gates)

// => complexity: O(N)

return largest

// Final complexity: O(N) + O(N*lg(N)) + O(N) = O(N*lg(N))

---------------------------------------------------------------------------------------------------------------

Part 4

// Approach 1: brute force
// Idea: try all possible pairs (A[i] + A[j])

closest = INFINITY
closestI = closestJ = -1
for i = 0 to N-2
  for j = i+1 to N-1
    if abs(A[i] + A[j]) < closest
      closest = abs(A[i] + A[j])
      closestI = i
      closestJ = j

Complexity analysis:
  The inner for loop executes at most (N - i - 1) times for each outer iteration
  i ranges from 0 to N-2
  => The total execution times of the inner loop: T(N) = (N-1) + (N-2) + ... + (N-(N-2)-1)
  T(N) = (N-1) + (N-2) + ... + 2 + 1
  T(N) = N*(N-1)/2
  Remove the less significant components and multiplicative constants, we have
  T(N) = O(N^2)


// Approach 2: sort then search
// Idea: after sorting, maintain two pointers: left and right
// initially, left = 0 and right = N-1
// calculate sum = A[left] + A[rigth]; there are three possible outcomes
// Outcome 1: sum = 0 => this is the closest sum to zero
// Outcome 2: sum > 0 => try to decrease the next sum: right--
// Outcome 3: sum < 0 => try to increase the next sum: left++
// eventually, left == right at which we stop
// during this process, always maintain the closet sum to zero
// Assumption: complexity of sorting O(N*lg(N))

sort(A)
closest = INFINITY
left = closestLeft = 0
right = closestRight = N-1
while left < right
  if closest > abs(A[left] + A[right])
    closest = abs(A[left] + A[right])
    closestLeft = left
    closestRight = right
  if A[left] + A[right] == 0
    break
  else if A[left] + A[right] > 0
    right--
  else
    left++

Complexity analysis of the while loop:
  The distance between left and right is N
  In each iteration, either left is increased or right is decreased by one
  => the distance between left and right is decreased by one
  => after at most N iterations, left and right will be equal
  => complexity O(N)
  Final complexity: O(N*lg(N)) + O(N) = O(N*lg(N))

===
Additional question: can you prove the correctness of Approach 2?

---------------------------------------------------------------------------------------------------------------

Part 5

N1 = 1,000
N2 = 1,000,000

=> N2 is 1,000 times bigger than N1

=> Because the complexity is O(N^3), the new running time
will be (1,000^3) times longer than the previous one

(1,000^3) * 100 msec = around 3.17 years